"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRef = void 0;
const names_1 = require("../names");
const assert = __importStar(require("assert"));
const path = __importStar(require("path"));
const descriptor_pb_1 = require("google-protobuf/google/protobuf/descriptor_pb");
const file_1 = require("./file");
const reserved_keywords_1 = require("../reserved-keywords");
function generateRef(fieldDescriptor, fileContext) {
    assert.ok(fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_MESSAGE ||
        fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_ENUM);
    const generatorContext = fileContext.getGeneratorContext();
    const fileDescriptor = generatorContext.getFileDescriptorByFieldDescriptor(fieldDescriptor);
    assert.ok(fileDescriptor !== undefined);
    const messageOrEnumDescriptor = generatorContext.getMessageOrEnumByFieldDescriptor(fieldDescriptor);
    assert.ok(messageOrEnumDescriptor !== undefined);
    const parentMessageDescriptors = generatorContext.getParentMessageDescriptorsByFieldDescriptor(fieldDescriptor);
    assert.ok(parentMessageDescriptors !== undefined);
    const messageOrEnumFilePath = (0, file_1.getOutputFilePath)(fileDescriptor, messageOrEnumDescriptor, parentMessageDescriptors);
    const messageOrEnumName = messageOrEnumDescriptor.getName();
    assert.ok(messageOrEnumName !== undefined);
    if (messageOrEnumFilePath === fileContext.getFilePath()) {
        // self-reference - don't import
        return (0, reserved_keywords_1.getSafeName)(messageOrEnumName);
    }
    const relativeMessageOrEnumFilePath = path.relative(path.dirname(fileContext.getFilePath()), messageOrEnumFilePath);
    return fileContext.registerImport(messageOrEnumName, (0, names_1.ensureRelativeImportDot)(relativeMessageOrEnumFilePath));
}
exports.generateRef = generateRef;
