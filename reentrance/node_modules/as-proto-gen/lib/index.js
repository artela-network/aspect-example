"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_pb_1 = require("google-protobuf/google/protobuf/compiler/plugin_pb");
const generator_context_1 = require("./generator-context");
const file_1 = require("./generate/file");
const prettier_1 = __importDefault(require("prettier"));
const fs = __importStar(require("fs-extra"));
const assert = __importStar(require("assert"));
const reportErrorAndExit = (error) => {
    console.log("An error occurred in as-proto generator plugin.");
    console.error(error);
    process.exit(1);
};
fs.readFile(process.stdin.fd, (error, input) => {
    if (error) {
        reportErrorAndExit(error);
        return;
    }
    try {
        const codeGenRequest = plugin_pb_1.CodeGeneratorRequest.deserializeBinary(input);
        const codeGenResponse = new plugin_pb_1.CodeGeneratorResponse();
        const generatorContext = new generator_context_1.GeneratorContext();
        const compilerOptions = new Set(codeGenRequest.getParameter()?.split(","));
        const compilerVersion = codeGenRequest.getCompilerVersion();
        codeGenResponse.setSupportedFeatures(plugin_pb_1.CodeGeneratorResponse.Feature.FEATURE_PROTO3_OPTIONAL);
        for (const fileDescriptor of codeGenRequest.getProtoFileList()) {
            generatorContext.registerFile(fileDescriptor);
            if (compilerOptions.has("no-gen-dependencies")) {
                const fileName = fileDescriptor.getName();
                assert.ok(fileName);
                if (!codeGenRequest.getFileToGenerateList().includes(fileName)) {
                    // file not listed directly in the command - skip
                    continue;
                }
            }
            const outputFiles = (0, file_1.generateFiles)(fileDescriptor, generatorContext, compilerOptions, compilerVersion);
            for (const outputFile of outputFiles) {
                try {
                    // try to reformat code
                    outputFile.setContent(prettier_1.default.format(outputFile.getContent() || "", {
                        parser: "typescript",
                    }));
                }
                catch (error) {
                    console.error(error);
                }
                codeGenResponse.addFile(outputFile);
            }
        }
        process.stdout.write(Buffer.from(codeGenResponse.serializeBinary().buffer));
    }
    catch (error) {
        reportErrorAndExit(error);
    }
});
