"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratorContext = void 0;
const descriptor_pb_1 = require("google-protobuf/google/protobuf/descriptor_pb");
const names_1 = require("./names");
const assert_1 = __importDefault(require("assert"));
class GeneratorContext {
    constructor() {
        this.fileNameToFileDescriptor = new Map();
        this.typeNameToFileDescriptor = new Map();
        this.typeNameToMessageDescriptor = new Map();
        this.typeNameToEnumDescriptor = new Map();
        this.typeNameToParentMessageDescriptors = new Map();
    }
    registerFile(fileDescriptor) {
        const fileName = fileDescriptor.getName();
        if (fileName) {
            this.fileNameToFileDescriptor.set(fileName, fileDescriptor);
        }
        for (const messageDescriptor of fileDescriptor.getMessageTypeList()) {
            this.registerMessage(fileDescriptor, messageDescriptor);
        }
        for (const enumDescriptor of fileDescriptor.getEnumTypeList()) {
            this.registerEnum(fileDescriptor, enumDescriptor);
        }
    }
    registerMessage(fileDescriptor, messageDescriptor, parentMessageDescriptors = []) {
        const filePackage = fileDescriptor.getPackage();
        const messageName = (0, names_1.getNamespacedTypeName)(messageDescriptor, parentMessageDescriptors);
        const fieldTypeName = (0, names_1.getFieldTypeName)(filePackage, messageName);
        this.typeNameToFileDescriptor.set(fieldTypeName, fileDescriptor);
        this.typeNameToMessageDescriptor.set(fieldTypeName, messageDescriptor);
        this.typeNameToParentMessageDescriptors.set(fieldTypeName, parentMessageDescriptors);
        for (const nestedMessageDescriptor of messageDescriptor.getNestedTypeList()) {
            this.registerMessage(fileDescriptor, nestedMessageDescriptor, [
                ...parentMessageDescriptors,
                messageDescriptor,
            ]);
        }
        for (const enumDescriptor of messageDescriptor.getEnumTypeList()) {
            this.registerEnum(fileDescriptor, enumDescriptor, [
                ...parentMessageDescriptors,
                messageDescriptor,
            ]);
        }
    }
    registerEnum(fileDescriptor, enumDescriptor, parentMessageDescriptors = []) {
        const filePackage = fileDescriptor.getPackage();
        const enumName = (0, names_1.getNamespacedTypeName)(enumDescriptor, parentMessageDescriptors);
        const fieldTypeName = (0, names_1.getFieldTypeName)(filePackage, enumName);
        this.typeNameToFileDescriptor.set(fieldTypeName, fileDescriptor);
        this.typeNameToEnumDescriptor.set(fieldTypeName, enumDescriptor);
        this.typeNameToParentMessageDescriptors.set(fieldTypeName, parentMessageDescriptors);
    }
    getFileDescriptorByFileName(fileName) {
        return this.fileNameToFileDescriptor.get(fileName);
    }
    getFileDescriptorByFieldDescriptor(fieldDescriptor) {
        const fieldTypeName = fieldDescriptor.getTypeName();
        assert_1.default.ok(fieldTypeName !== undefined);
        return this.getFileDescriptorByFieldTypeName(fieldTypeName);
    }
    getFileDescriptorByFieldTypeName(fieldTypeName) {
        return this.typeNameToFileDescriptor.get(fieldTypeName);
    }
    getMessageDescriptorByFieldTypeName(fieldTypeName) {
        return this.typeNameToMessageDescriptor.get(fieldTypeName);
    }
    getEnumDescriptorByFieldTypeName(fieldTypeName) {
        return this.typeNameToEnumDescriptor.get(fieldTypeName);
    }
    getMessageOrEnumByFieldDescriptor(fieldDescriptor) {
        assert_1.default.ok(fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_MESSAGE ||
            fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_ENUM);
        const fieldTypeName = fieldDescriptor.getTypeName();
        assert_1.default.ok(fieldTypeName !== undefined);
        return fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_MESSAGE
            ? this.getMessageDescriptorByFieldTypeName(fieldTypeName)
            : this.getEnumDescriptorByFieldTypeName(fieldTypeName);
    }
    getParentMessageDescriptorsByFieldTypeName(fieldTypeName) {
        return this.typeNameToParentMessageDescriptors.get(fieldTypeName);
    }
    getParentMessageDescriptorsByFieldDescriptor(fieldDescriptor) {
        assert_1.default.ok(fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_MESSAGE ||
            fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_ENUM);
        const fieldTypeName = fieldDescriptor.getTypeName();
        assert_1.default.ok(fieldTypeName !== undefined);
        return this.getParentMessageDescriptorsByFieldTypeName(fieldTypeName);
    }
}
exports.GeneratorContext = GeneratorContext;
