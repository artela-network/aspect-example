"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeFileName = exports.ensureRelativeImportDot = exports.getTypeName = exports.getFieldTypeName = exports.getNamespacedTypeName = exports.getPathWithoutExtension = void 0;
const assert = __importStar(require("assert"));
/**
 * Removes extension suffix from the file path
 * @param filePath File path to remove extension from
 * @param extension Extension to remove
 * @returns File path without extension
 */
function getPathWithoutExtension(filePath, extension) {
    return filePath.endsWith(extension)
        ? filePath.slice(0, -extension.length)
        : filePath;
}
exports.getPathWithoutExtension = getPathWithoutExtension;
/**
 * Get namespaced type name from descriptors.
 */
function getNamespacedTypeName(messageOrEnumDescriptor, parentMessageDescriptors) {
    assert.ok(messageOrEnumDescriptor.getName() !== undefined);
    return [
        ...parentMessageDescriptors.map((parentMessageDescriptor) => parentMessageDescriptor.getName()),
        messageOrEnumDescriptor.getName(),
    ].join(".");
}
exports.getNamespacedTypeName = getNamespacedTypeName;
/**
 * Gets protobuf representation of a "field type name" which starts with .
 */
function getFieldTypeName(filePackage, typeName) {
    let fieldTypeName = "";
    if (filePackage) {
        fieldTypeName += ensureLeadingDot(filePackage);
    }
    if (typeName) {
        fieldTypeName += ensureLeadingDot(typeName);
    }
    return fieldTypeName;
}
exports.getFieldTypeName = getFieldTypeName;
/**
 * Ensures that a given string starts with a dot
 */
function ensureLeadingDot(string) {
    return string.startsWith(".") ? string : "." + string;
}
/**
 * Extracts type name from a "field type name" (protobuf representation which starts with .)
 */
function getTypeName(fieldTypeName) {
    return fieldTypeName.startsWith(".") ? fieldTypeName.slice(1) : fieldTypeName;
}
exports.getTypeName = getTypeName;
/**
 * Ensures that relative import has dot at the beginning.
 */
function ensureRelativeImportDot(importName) {
    return importName.startsWith(".") || importName.startsWith("/")
        ? importName
        : `./${importName}`;
}
exports.ensureRelativeImportDot = ensureRelativeImportDot;
function sanitizeFileName(unsafeFileName) {
    return unsafeFileName.replace(/[^a-z0-9._\-]/gi, "_");
}
exports.sanitizeFileName = sanitizeFileName;
