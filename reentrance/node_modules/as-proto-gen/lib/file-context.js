"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileContext = void 0;
const scope_context_1 = require("./scope-context");
const assert = __importStar(require("assert"));
const names_1 = require("./names");
class FileContext {
    constructor(filePath, generatorContext, fileDescriptor) {
        this.registeredImports = new Map();
        this.registeredDefinitions = new Set();
        this.filePath = filePath;
        this.generatorContext = generatorContext;
        this.fileDescriptor = fileDescriptor;
        this.moduleScopeContext = new scope_context_1.ScopeContext(this);
    }
    getFilePath() {
        return this.filePath;
    }
    getGeneratorContext() {
        return this.generatorContext;
    }
    getFileDescriptor() {
        return this.fileDescriptor;
    }
    registerImport(importName, importPath) {
        const normalizedImportPath = (0, names_1.getPathWithoutExtension)(importPath, ".ts");
        const importNames = this.registeredImports.get(normalizedImportPath) ||
            new Map();
        const safeImportName = importNames.get(importName) ||
            this.moduleScopeContext.registerName(importName);
        importNames.set(importName, safeImportName);
        this.registeredImports.set(normalizedImportPath, importNames);
        return safeImportName;
    }
    registerDefinition(definitionName) {
        if (!this.registeredDefinitions.has(definitionName)) {
            // we assume that definitions are registered before imports
            assert.ok(!this.moduleScopeContext.hasRegisteredName(definitionName));
            this.registeredDefinitions.add(definitionName);
            // reserve this name
            this.moduleScopeContext.registerName(definitionName);
        }
        return definitionName;
    }
    getImportsCode() {
        let importLines = [];
        for (const [importPath, importNames] of this.registeredImports) {
            const importFields = [];
            for (const [importName, safeImportName] of importNames) {
                const isAliased = importName !== safeImportName;
                importFields.push(isAliased ? `${importName} as ${safeImportName}` : `${importName}`);
            }
            importLines.push(`import { ${importFields.join(", ")} } from ${JSON.stringify(importPath)};`);
        }
        return importLines.join("\n");
    }
}
exports.FileContext = FileContext;
